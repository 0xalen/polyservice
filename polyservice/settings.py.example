"""
Django settings for polyservice project.
"""

from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent


# SECRET
# python manage.py shell -c 'from django.core.management import utils; print(utils.get_random_secret_key())'
SECRET_KEY = '<SECURE_KEY>'

# Deployment constants
DEBUG = True
# DEBUG = False

DEMO = True
# DEMO = False

# Hosts
ALLOWED_HOSTS = [
    "[PROD_DOMAIN]",
    "127.0.0.1",
]

# Applications
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',

    'apps.providers',

    'rest_framework',
    'rest_framework.authtoken',
    'djmoney',
    'drf_spectacular',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'polyservice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'polyservice.wsgi.application'


# Database configuration
db_server_ip = '127.0.0.1'
db_server_port = '5432'

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'OPTIONS': {
            'options': '-c search_path=public'
        },
        'NAME': 'polyservicedb',
        'USER': 'polyserviceuser',
        'PASSWORD': '<SECURE_PASSWORD>',
        'HOST': db_server_ip,
        'PORT': db_server_port,
        'TEST': {
            'NAME': 'test_polyservicedb',
        }
    }
}

# GeoJSON Serializer
SERIALIZATION_MODULES = {
    "geojson": "django.contrib.gis.serializers.geojson",
 }


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Rest API configuration (3 options)
# 1 - DEMO: without authentication
'''
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [],
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
'''

# 2 - PROD: With simple session authentication
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# 3 - PROD (Alternative): With JWT Token authentication
'''
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
} 
JWT_KEY = '2mok3ju9bj$ey7*iq0m#(exw+rx-y4f7cl=&1)2x))58h*ada+'
JWT_AUTH = {
    'JWT_SECRET_KEY': JWT_KEY,
    'JWT_ALGORITHM': 'HS256',
    'JWT_ALLOW_REFRESH': True,
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}
'''
# OpenAPI settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'PolyService API',
    'DESCRIPTION': 'API that allows providers to update geographic information about service areas.',
    'VERSION': '1.0.0',
}


# API Rest access
# LOGIN_REDIRECT_URL = '/api/auth/login'
# LOGOUT_REDIRECT_URL = '/api/auth/logout'

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
DEFAULT_CURRENCY = 'USD'

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
